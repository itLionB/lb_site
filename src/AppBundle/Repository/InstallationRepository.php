<?php

namespace AppBundle\Repository;

/**
 * InstallationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstallationRepository extends \Doctrine\ORM\EntityRepository
{
    public function getHotInstallations()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.hotStatus = :status'
            )
            ->setParameter('status', 'Yes')
            ->getResult();
    }

    public function getMissingConfirmation()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.confirmationDateSet = :status
                OR i.confirmationDateSet is Null'   
            )
            ->setParameter('status', 'No')
            ->getResult();
    }

    public function getManufacturerNull()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.installationCompany is Null
                OR i.installationCompany = :status'
            )
            ->setParameter('status', 'TBD')
            ->getResult();
    }

    public function getSiteSpecifics()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.siteSpecifics = :status'
            )
            ->setParameter('status', 'Yes')
            ->getResult();
    }

    public function getNullDateInstallation()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.installationDateSet =:instDate
                OR i.installationStatus = :status'
            )
            ->setParameters([
                'instDate' => 'No',
                'status' => 'Pending Install'
            ])
            ->getResult();
    }

    public function getHotPending()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.hotStatus = :status'            )
            ->setParameter('status', 'Yes')
            ->getResult();
    }

    public function getSiteSpecificsNoOrdered()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.stepOrdered =:stpeord
                AND i.installationStatus =:status
                AND i.siteSpecifics =:site'
            )
            ->setParameters([
                'stpeord' => 'No',
                'status' => 'Pending Install',
                'site' => 'Yes'
            ])
            ->getResult();
    }

    public function getOnHold()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.installationStatus =:status'
            )
            ->setParameter('status', 'Hold')
            ->getResult();
    }

    public function getPendingToInstall()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT i
                FROM AppBundle:Installation i
                WHERE i.installationStatus =:status'
            )
            ->setParameter('status', 'Pending to Install')
            ->getResult();
    }

    public function getDelayed()
    {
        
            
    }

}
